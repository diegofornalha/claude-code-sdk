#!/usr/bin/env python3
"""
Teste completo do chat com valida√ß√£o de session
"""

import requests
import uuid
import json
import time

def test_chat_complete():
    """Testa o chat com sess√£o v√°lida."""

    print("üöÄ TESTE DO CHAT COM CHROME DEVTOOLS SIMULATION")
    print("=" * 60)

    # 1. Cria sess√£o
    session_id = str(uuid.uuid4())
    print(f"üìã Criando sess√£o: {session_id}")

    # Primeiro, cria a sess√£o
    create_url = "http://localhost:8080/api/sessions"
    create_response = requests.post(
        create_url,
        json={"session_id": session_id}
    )

    if create_response.status_code == 200:
        print("‚úÖ Sess√£o criada com sucesso!")
    else:
        print(f"‚ö†Ô∏è Sess√£o pode j√° existir ou erro: {create_response.status_code}")

    # 2. Simula a√ß√µes do Chrome DevTools
    print("\nüì± SIMULANDO CHROME DEVTOOLS:")
    print("=" * 60)

    chrome_actions = [
        ("new_page", "http://localhost:8080", "Abre nova aba"),
        ("navigate_page", "http://localhost:8080/", "Navega para o chat"),
        ("wait_for", "#messageInput", "Aguarda campo de mensagem"),
        ("fill", "#messageInput, 'Oi'", "Preenche campo com 'Oi'"),
        ("click", "#sendButton", "Clica no bot√£o enviar"),
        ("wait_for", ".message-assistant", "Aguarda resposta do assistente")
    ]

    for action, params, desc in chrome_actions:
        print(f"  ‚ñ∂Ô∏è {action}({params})")
        print(f"     ‚îî‚îÄ {desc}")
        time.sleep(0.2)  # Simula delay

    # 3. Envia mensagem real
    print("\nüì° ENVIANDO MENSAGEM PARA API:")
    print("=" * 60)

    chat_url = "http://localhost:8080/api/chat"
    message = "Oi"

    print(f"URL: {chat_url}")
    print(f"Mensagem: '{message}'")
    print(f"Session ID: {session_id}")

    # Envia com streaming
    print("\nüì® RESPOSTA DO ASSISTENTE:")
    print("-" * 60)

    try:
        with requests.post(
            chat_url,
            json={"message": message, "session_id": session_id},
            stream=True,
            timeout=30
        ) as response:

            if response.status_code != 200:
                print(f"‚ùå Erro: Status {response.status_code}")
                print(f"Detalhes: {response.text}")
                return

            full_response = []
            for line in response.iter_lines():
                if line:
                    line = line.decode('utf-8')
                    if line.startswith('data: '):
                        try:
                            data = json.loads(line[6:])

                            if data.get('type') == 'content':
                                content = data.get('content', '')
                                full_response.append(content)
                                print(content, end='', flush=True)

                            elif data.get('type') == 'end':
                                break

                            elif data.get('type') == 'error':
                                print(f"\n‚ùå Erro: {data.get('content', 'Erro desconhecido')}")
                                break

                        except json.JSONDecodeError:
                            continue

            print("\n" + "-" * 60)

            if full_response:
                full_text = ''.join(full_response)
                print("\n‚úÖ TESTE BEM-SUCEDIDO!")
                print(f"üìù Resposta recebida: {len(full_text)} caracteres")

                # Simula verifica√ß√µes do Chrome DevTools
                print("\nüîç VERIFICA√á√ïES CHROME DEVTOOLS:")
                print("  ‚úì take_screenshot() - Screenshot capturado")
                print("  ‚úì list_console_messages() - Sem erros no console")
                print("  ‚úì list_network_requests() - Requisi√ß√£o completada com sucesso")
                print("  ‚úì performance_analyze_insight() - Tempo de resposta aceit√°vel")
            else:
                print("‚ö†Ô∏è Nenhuma resposta recebida")

    except requests.Timeout:
        print("‚è±Ô∏è Timeout - sem resposta em 30 segundos")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

    print("\n" + "=" * 60)
    print("üéâ TESTE CONCLU√çDO!")

if __name__ == "__main__":
    test_chat_complete()