#!/usr/bin/env python3
"""
Teste de conex√£o com Neo4j
"""

import os
import sys
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Adiciona o diret√≥rio pai ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_neo4j_connection():
    """Testa a conex√£o com Neo4j."""

    print("üîç TESTE DE CONEX√ÉO COM NEO4J")
    print("=" * 60)

    # Verifica vari√°veis de ambiente
    neo4j_uri = os.getenv("NEO4J_URI")
    neo4j_user = os.getenv("NEO4J_USER")
    neo4j_password = os.getenv("NEO4J_PASSWORD")

    print(f"üìã Configura√ß√£o:")
    print(f"  URI: {neo4j_uri}")
    print(f"  User: {neo4j_user}")
    print(f"  Password: {'*' * len(neo4j_password) if neo4j_password else 'NOT SET'}")
    print()

    if not all([neo4j_uri, neo4j_user, neo4j_password]):
        print("‚ùå Vari√°veis de ambiente n√£o configuradas!")
        print("   Configure NEO4J_URI, NEO4J_USER e NEO4J_PASSWORD")
        return False

    try:
        from neo4j import GraphDatabase

        print("üì° Conectando ao Neo4j...")

        # Tenta conectar
        driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_user, neo4j_password))

        # Testa a conex√£o
        with driver.session() as session:
            result = session.run("RETURN 1 AS test")
            record = result.single()

            if record and record["test"] == 1:
                print("‚úÖ Conex√£o bem-sucedida!")

                # Conta n√≥s Learning
                result = session.run("""
                    MATCH (n:Learning)
                    RETURN count(n) as total
                """)
                count_record = result.single()
                count = count_record["total"] if count_record else 0
                print(f"\nüìä Estat√≠sticas:")
                print(f"  Total de n√≥s Learning: {count}")

                # Lista alguns n√≥s recentes
                result = session.run("""
                    MATCH (n:Learning)
                    RETURN n.title AS title, n.content AS content, n.timestamp AS timestamp
                    ORDER BY n.timestamp DESC
                    LIMIT 3
                """)

                print(f"\nüìù √öltimas mem√≥rias:")
                records = list(result)
                if records:
                    for i, record in enumerate(records, 1):
                        title = record.get("title", "Sem t√≠tulo")
                        content = record.get("content", "")
                        if content and len(content) > 50:
                            content = content[:50] + "..."
                        print(f"  {i}. {title}")
                        if content:
                            print(f"     {content}")
                else:
                    print("  Nenhuma mem√≥ria encontrada ainda.")

                driver.close()
                return True

    except ImportError:
        print("‚ùå Biblioteca neo4j n√£o instalada!")
        print("   Execute: pip3 install neo4j")
        return False

    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        print("\nüí° Verifique se:")
        print("  1. O Neo4j est√° rodando em localhost:7687")
        print("  2. As credenciais est√£o corretas")
        print("  3. O banco de dados est√° acess√≠vel")
        return False

if __name__ == "__main__":
    success = test_neo4j_connection()

    if success:
        print("\n‚úÖ NEO4J EST√Å CONFIGURADO E FUNCIONANDO!")
        print("   A integra√ß√£o com o chat est√° habilitada.")
    else:
        print("\n‚ö†Ô∏è NEO4J N√ÉO EST√Å ACESS√çVEL")
        print("   O chat funcionar√° mas sem persist√™ncia de mem√≥rias.")