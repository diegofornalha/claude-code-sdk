#!/usr/bin/env python3
"""
Teste da integra√ß√£o Neo4j Memory com o chat
"""

import asyncio
import json
from core.neo4j_memory_integration import get_memory_integration

async def test_memory():
    """Testa a integra√ß√£o de mem√≥ria Neo4j"""

    print("üß™ Testando integra√ß√£o de mem√≥ria Neo4j...")

    # Obter inst√¢ncia da integra√ß√£o
    memory = await get_memory_integration()

    # Teste 1: Buscar contexto do usu√°rio
    print("\nüìñ Teste 1: Buscando contexto do usu√°rio...")
    context = await memory.get_user_context(query="meu nome")

    if context.get("user_profile"):
        print(f"‚úÖ Perfil encontrado: {context['user_profile']}")
    else:
        print("‚ö†Ô∏è Perfil n√£o encontrado")

    if context.get("relevant_memories"):
        print(f"‚úÖ Mem√≥rias encontradas: {len(context['relevant_memories'])} mem√≥rias")
        for mem in context['relevant_memories'][:2]:
            print(f"  - {mem.get('name', 'Sem nome')}")
    else:
        print("‚ö†Ô∏è Nenhuma mem√≥ria relevante encontrada")

    # Teste 2: Salvar intera√ß√£o
    print("\nüíæ Teste 2: Salvando nova intera√ß√£o...")
    await memory.save_interaction(
        user_message="Meu nome √© Diego, sou desenvolvedor",
        assistant_response="Ol√° Diego! Prazer em conhec√™-lo. Como posso ajudar voc√™ com seu projeto de desenvolvimento?",
        session_id="test-session-001"
    )
    print("‚úÖ Intera√ß√£o salva com sucesso")

    # Teste 3: Verificar se a mem√≥ria foi persistida
    print("\nüîç Teste 3: Verificando persist√™ncia...")
    await asyncio.sleep(1)  # Aguarda um pouco para garantir que foi salvo

    new_context = await memory.get_user_context(query="Diego desenvolvedor")
    if new_context.get("relevant_memories"):
        found = False
        for mem in new_context['relevant_memories']:
            if "Diego" in str(mem.get("user_message", "")) or "Diego" in str(mem.get("description", "")):
                found = True
                print(f"‚úÖ Mem√≥ria encontrada: {mem.get('name', 'Conversa')}")
                break

        if not found:
            print("‚ö†Ô∏è Mem√≥ria n√£o encontrada ap√≥s salvamento")

    # Teste 4: Formata√ß√£o de contexto
    print("\nüìù Teste 4: Formatando contexto para prompt...")
    formatted = memory.format_context_for_prompt(context)
    if formatted:
        print("‚úÖ Contexto formatado:")
        print(formatted[:200] + "..." if len(formatted) > 200 else formatted)
    else:
        print("‚ö†Ô∏è Contexto vazio")

    # Fechar conex√£o
    await memory.close()
    print("\n‚úÖ Testes conclu√≠dos!")

if __name__ == "__main__":
    asyncio.run(test_memory())